#! /usr/bin/env node

require('dotenv').config({path: `${__dirname}/.env`});
const rmdir = require('rimraf');
const yargs = require('yargs/yargs')
const {hideBin} = require('yargs/helpers')
const argv = yargs(hideBin(process.argv))
    .default({size: '1024x768'})
    .demandOption(['room'])
    .describe('size', 'The size of recorded video(s)')
    .describe('room', 'The ID of the room to record').argv;

const axios = require('axios').create({
    headers: {
        Authorization: 'Bearer ' + process.env['ICE_API_TOKEN'],
        Accept: 'application/json'
    }
});
const {PassThrough} = require('stream');
const fs = require('fs');
const Websocket = require('ws');
const {RTCAudioSink, RTCVideoSink} = require('wrtc').nonstandard;
const {RTCPeerConnection, RTCIceCandidate, RTCSessionDescription} = require('wrtc');
const ffmpeg = require('fluent-ffmpeg');
const {StreamInput} = require('fluent-ffmpeg-multistream');

const VIDEO_OUTPUT_SIZE = argv.size;
const VIDEO_INPUT_DIR = `./storage/app/${argv.room}`;
const VIDEO_OUTPUT_FILE = `./storage/app/public/recordings/${argv.room}`;

let peers = {}, iceServers = [], signalingChannel;

function initSignalingChannel(){
    signalingChannel = new Websocket(`${process.env['PROTOCOL']}://${process.env['DOMAIN']}:${process.env['PORT']}${process.env['URL']}`);
    signalingChannel.onopen = () => {
        signalingChannel.send(JSON.stringify({
            action: 'record',
            room: argv.room
        }));
    };
    addSignalingListeners();
}

function addSignalingListeners(){
    signalingChannel.onmessage = (e) => {
        var message = JSON.parse(e.data);
        switch(message.action){
            case 'peer':
                if(peers[message.id] === undefined)
                    initRemotePeer(message);
                break;
            case 'answer':
                handleAnswer(message.answer, message.senderId)
                break;
            case 'candidate':
                handleCandidate(message.candidate, message.senderId);
                break;
        }
    }
}

function handleAnswer(answer, peerId){
    let connection = peers[peerId].connection;
    if(!connection.remoteDescription)
        connection.setRemoteDescription(new RTCSessionDescription(answer)).then(() => addPendingCandidates(peerId));
}

function handleCandidate(candidate, senderId){
    let connection = peers[senderId].connection;
    if(!connection.remoteDescription)
        peers[senderId].pendingCandidates.push(candidate);
    else
        connection.addIceCandidate(new RTCIceCandidate(candidate)).catch(function(e){
            console.error('Could not add received ICE candidate', e);
        });
}

function addPendingCandidates(peerId){
    peers[peerId].pendingCandidates.forEach((candidate) => handleCandidate(candidate, peerId));
    peers[peerId].pendingCandidates = [];
}

function initRemotePeer(initMessage){
    let peerId = initMessage.id, audioOnly = argv.audioOnly || initMessage.audioOnly || false;
    peers[peerId] = {
        audioOnly,
        connection: new RTCPeerConnection({iceServers}),
        pendingSdp: null,
        pendingCandidates: [],
        stream: null,
        sink: {
            audio: null,
            video: null
        }
    };
    addIceListeners(peerId);
    initRecording(peerId);
    peers[peerId].connection.createOffer().then((offer) => peers[peerId].connection.setLocalDescription(offer)).then(() => {
        signalingChannel.send(JSON.stringify({
            action: 'record',
            peer: peerId,
            offer: peers[peerId].connection.localDescription
        }));
    });
}

function addIceListeners(peerId){
    let connection = peers[peerId].connection;
    connection.addEventListener('icecandidate', (e) => {
        if(e.candidate)
            signalingChannel.send(JSON.stringify({
                action: 'candidate',
                id: peerId,
                candidate: e.candidate
            }));
    });
    connection.addEventListener('icecandidateerror', (e) => {
        console.error('ICE error:', e);
    });
    connection.addEventListener('icegatheringstatechange', (e) => {
        let ice = e.target;
        if(ice.iceGatheringState == 'complete' && peers[peerId].pendingSdp != null){
            signalingChannel.send(JSON.stringify(peers[peerId].pendingSdp));
            peers[peerId].pendingSdp = null;
        }
    });
}

function initStream(peerId){
    let connection = peers[peerId].connection;
    peers[peerId].sink.audio = new RTCAudioSink(connection.addTransceiver('audio').receiver.track);
    peers[peerId].stream = {
        recordPath: `${VIDEO_INPUT_DIR}/${peerId}`,
        size: null,
        video: null,
        audio: new PassThrough()
    };
    const onAudioData = ({samples: {buffer}}) => {
        if(peers[peerId].audioOnly && !peers[peerId].stream.proc)
            initPeerRecording(peerId);
        if(!peers[peerId].stream.end)
            peers[peerId].stream.audio.push(Buffer.from(buffer));
    };
    peers[peerId].sink.audio.addEventListener('data', onAudioData);
    peers[peerId].stream.audio.on('end', () => {
        peers[peerId].sink.audio.removeEventListener('data', onAudioData);
    });
}

function enableVideo(peerId){
    let connection = peers[peerId].connection;
    peers[peerId].stream.video = new PassThrough();
    peers[peerId].sink.video = new RTCVideoSink(connection.addTransceiver('video').receiver.track);

    peers[peerId].sink.video.addEventListener('frame', ({frame: {width, height, data}}) => {
        if(!peers[peerId].stream.size){
            const size = width + 'x' + height;
            peers[peerId].stream.size = size;
            peers[peerId].stream.recordPath += `-${size}.mp4`;
        }
        if(!peers[peerId].audioOnly && !peers[peerId].stream.proc)
            initPeerRecording(peerId);
        peers[peerId].stream.video.push(Buffer.from(data));
    });
}

function initPeerRecording(peerId){
    let stream = peers[peerId].stream;
    stream.proc = ffmpeg().addInput((new StreamInput(stream.audio)).url)
        .addInputOptions([
            '-f s16le',
            '-ar 48k'
        ]);
    if(!peers[peerId].audioOnly)
        stream.proc.addInput((new StreamInput(stream.video)).url)
            .addInputOptions([
                '-f', 'rawvideo',
                '-pix_fmt', 'yuv420p',
                '-s', stream.size,
                '-r', '30',
            ]);
    stream.proc.on('start', () => {
        console.log('Started recording to ', stream.recordPath)
    }).on('end', () => {
        stream.recordEnd = true;
        console.log('Stopped recording to ', stream.recordPath)
    }).size(VIDEO_OUTPUT_SIZE).output(stream.recordPath).run();
}

function initRecording(peerId){
    let connection = peers[peerId].connection;
    initStream(peerId);
    if(peers[peerId].audioOnly)
        peers[peerId].stream.recordPath += '.mp3';
    else
        enableVideo(peerId);

    connection.addEventListener('connectionstatechange', () => {
        if(['disconnected', 'closed'].includes(connection.connectionState)){
            peers[peerId].sink.audio.stop();
            if(!peers[peerId].audioOnly)
                peers[peerId].sink.video.stop();
            if(!peers[peerId].stream.end){
                if(peers[peerId].stream.audio)
                    peers[peerId].stream.audio.end();
                if(peers[peerId].stream.video)
                    peers[peerId].stream.video.end();
                peers[peerId].stream.end = true;
            }
        }
    });
}

function square(number){
    let steps = 0;
    if(Math.sqrt(number) - Math.floor(Math.sqrt(number)) == 0)
        return {number, steps};
    while(true){
        steps++;
        number++;
        if(Math.sqrt(number) - Math.floor(Math.sqrt(number)) == 0)
            return {number, steps};
    }
}

function mergeStreams(){
    let audioOnly = argv.audioOnly || false, videosCount = peers.length, filters = [], i, proc = ffmpeg().on('start', () => {
        console.log('Start merging into ' + VIDEO_OUTPUT_FILE);
    }).on('end', () => {
        rmdir(VIDEO_INPUT_DIR);
        console.log('Finished merging ' + VIDEO_OUTPUT_FILE);
        process.exit();
    });
    for(i in peers){
        proc.addInput(peers[i].stream.recordPath)
        if(peers[i].audioOnly)
            videosCount--;
    }
    if(videosCount <= 0)
        audioOnly = true;
    else{
        let {number: squareEdge, steps: fills} = square(videosCount), i = 0, hstack, vstack = '';
        if(squareEdge > 1){
            if(fills > 0)
                filters.push(`color=black:s=${VIDEO_OUTPUT_SIZE}[black]`);
            for(let row = 0; row < squareEdge; row++){
                hstack = '';
                for(let column = 0; column < squareEdge; column++){
                    hstack += (i < videosCount)? `[${i}:v]` : '[black]';
                    i++;
                }
                hstack += `hstack=inputs=${squareEdge}[r${row}]`;
                vstack += `[r${row}]`;
                filters.push(hstack);
            }
            vstack += 'vstack[m]';
            filters.push(vstack, `[m]scale=${VIDEO_OUTPUT_SIZE}[v]`);
        }
    }
    if(peers.length > 1)
        filters.push(`amix=${peers.length}`);
    if(filters.length)
        proc.complexFilter(filters);
    proc.output(VIDEO_OUTPUT_FILE + audioOnly? '.mp3' : '.mp4').run();
}

// Checks if all peers went offline to merge their recordings before successfully terminating the process.
let peersLoop = setInterval(() => {
    let peersCount = Object.keys(peers).length, offlineCount = 0;
    if(peersCount == 0)
        return;
    for(var id in peers)
        if(peers[id].stream && peers[id].stream.end)
            offlineCount++;
    if(offlineCount == peersCount){
        clearInterval(peersLoop);
        mergeStreams();
    }
}, 1000);

// Starts the recording service for the given room.
axios.get(process.env['ICE_API_URL']).then((response) => {
    if(!fs.existsSync(VIDEO_INPUT_DIR))
        fs.mkdirSync(VIDEO_INPUT_DIR, {recursive: true});
    iceServers = response.iceServers;
    initSignalingChannel();
}).catch((error) => console.log(error));